/*
 * Copyright 2010 Renren, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.renren.android;

import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

import com.moupress.app.util.Renren.FeedExtractRequestParam;
import com.moupress.app.util.Renren.FeedExtractRequestResponseBean;
import com.moupress.app.util.Renren.FeedHelper;
import com.moupress.app.util.Renren.RenrenUtil;

import android.content.Context;
import android.os.Bundle;



/**
 * å¯¹äººäººçš„è¯·æ±‚å°?è£…æˆ?å¼‚æ­¥ã€‚æ³¨æ„?ï¼šä½¿ç”¨è¯¥ç±»è°ƒç”¨äººäººæŽ¥å?£æ—¶ï¼Œä¸?èƒ½åœ¨Listenerä¸­ç›´æŽ¥æ›´æ–°UIæŽ§ä»¶ã€‚
 * 
 * @see Renren
 * @see RequestListener
 * 
 * @author yong.li@opi-corp.com
 * 
 */
public class AsyncRenren {

    private RenrenUtil renren;

    private Executor pool;

    public AsyncRenren(RenrenUtil renren) {
        this.renren = renren;
        this.pool = Executors.newFixedThreadPool(2);
    }

    /**
     * é€€å‡ºç™»å½•
     * 
     * @param context
     * @param listener æ³¨æ„?ç›‘å?¬å™¨ä¸­ä¸?åœ¨ä¸»çº¿ç¨‹ä¸­æ‰§è¡Œï¼Œæ‰€ä»¥ä¸?èƒ½åœ¨ç›‘å?¬å™¨ä¸­ç›´æŽ¥æ›´æ–°UIä»£ç ?ã€‚
     */
    public void logout(final Context context, final RequestListener listener) {
        pool.execute(new Runnable() {

            @Override
            public void run() {
                try {
                    String resp = renren.logout(context);
                    RenrenError rrError = Util.parseRenrenError(resp, RenrenUtil.RESPONSE_FORMAT_JSON);
                    if (rrError != null) listener.onRenrenError(rrError);
                    else listener.onComplete(resp);
                } catch (Throwable e) {
                    listener.onFault(e);
                }
            }
        });
    }

    /**
     * è°ƒç”¨ äººäºº APIsï¼Œæœ?åŠ¡å™¨çš„å“?åº”æ˜¯JSONä¸²ã€‚
     * 
     * äººäºº APIs è¯¦ç»†ä¿¡æ?¯è§? http://wiki.dev.renren.com/wiki/API
     * 
     * @param parameters æ³¨æ„?ç›‘å?¬å™¨ä¸­ä¸?åœ¨ä¸»çº¿ç¨‹ä¸­æ‰§è¡Œï¼Œæ‰€ä»¥ä¸?èƒ½åœ¨ç›‘å?¬å™¨ä¸­ç›´æŽ¥æ›´æ–°UIä»£ç ?ã€‚
     * @param listener
     */
    public void requestJSON(Bundle parameters, RequestListener listener) {
        request(parameters, listener, RenrenUtil.RESPONSE_FORMAT_JSON);
    }

    /**
     * è°ƒç”¨ äººäºº APIs æœ?åŠ¡å™¨çš„å“?åº”æ˜¯XMLä¸²ã€‚
     * 
     * äººäºº APIs è¯¦ç»†ä¿¡æ?¯è§? http://wiki.dev.renren.com/wiki/API
     * 
     * @param parameters æ³¨æ„?ç›‘å?¬å™¨ä¸­ä¸?åœ¨ä¸»çº¿ç¨‹ä¸­æ‰§è¡Œï¼Œæ‰€ä»¥ä¸?èƒ½åœ¨ç›‘å?¬å™¨ä¸­ç›´æŽ¥æ›´æ–°ä»£ç ?ã€‚
     * @param listener
     */
    public void requestXML(Bundle parameters, RequestListener listener) {
        request(parameters, listener, RenrenUtil.RESPONSE_FORMAT_XML);
    }

    /**
     * è°ƒç”¨ äººäºº APIsã€‚
     * 
     * äººäºº APIs è¯¦ç»†ä¿¡æ?¯è§? http://wiki.dev.renren.com/wiki/API
     * 
     * @param parameters
     * @param listener æ³¨æ„?ç›‘å?¬å™¨ä¸­ä¸?åœ¨ä¸»çº¿ç¨‹ä¸­æ‰§è¡Œï¼Œæ‰€ä»¥ä¸?èƒ½åœ¨ç›‘å?¬å™¨ä¸­ç›´æŽ¥æ›´æ–°UIä»£ç ?ã€‚
     * @param format return data format (json or xml)
     */
    private void request(final Bundle parameters, final RequestListener listener,
            final String format) {
        pool.execute(new Runnable() {

            @Override
            public void run() {

                try {
                    String resp = "";
                    if ("xml".equalsIgnoreCase(format)) {
                        resp = renren.requestXML(parameters);
                    } else {
                        resp = renren.requestJSON(parameters);
                    }
                    RenrenError rrError = Util.parseRenrenError(resp, format);
                    if (rrError != null) {
                        listener.onRenrenError(rrError);
                    } else {
                        listener.onComplete(resp);
                    }
                } catch (Throwable e) {
                    listener.onFault(e);
                }
            }
        });
    }
    
	/**
	 * å¼‚æ­¥æ–¹æ³•<br>
	 * ä½¿ç”¨ç”¨æˆ·å??å’Œå¯†ç ?å®Œæˆ?ç™»é™†å’ŒæŽˆæ?ƒ <br>
	 * 
	 * @see Renren.authorize
	 * @param param
	 *            è¯·æ±‚å¯¹è±¡
	 * @param listener
	 *            ç™»é™†çŠ¶æ€?çš„ç›‘å?¬å™¨
	 */
	public void authorize(PasswordFlowRequestParam param, RenrenAuthListener listener) {
		PasswordFlowHelper passwordFlowHelper = new PasswordFlowHelper();
		passwordFlowHelper.login(pool, param, listener, renren);
	}
    
	/**
	 * 
	 * @see Renren.uploadPhoto
	 */
//    public void publishPhoto(final long albumId, final byte[] photo, final String fileName,
//            final String description, final String format, final RequestListener listener) {
//        pool.execute(new Runnable() {
//
//            @Override
//            public void run() {
//
//                try {
//                    String resp = renren.publishPhoto(albumId, photo, fileName, description, format);
//                    RenrenError rrError = Util.parseRenrenError(resp, format);
//                    if (rrError != null) {
//                        listener.onRenrenError(rrError);
//                    } else {
//                        listener.onComplete(resp);
//                    }
//                } catch (Throwable e) {
//                    listener.onFault(e);
//                }
//            }
//        });
//    }
    
	/**
	 * users.getInfoæŽ¥å?£<br>
	 * http://wiki.dev.renren.com/wiki/Users.getInfo
	 * @see Renren.getUsersInfo
	 * 
	 * @param param
	 *            è¯·æ±‚å?‚æ•°
	 * @see Renren.getUsersInfo
	 */
//    public void getUsersInfo (UsersGetInfoRequestParam param, AbstractRequestListener<UsersGetInfoResponseBean> listener) {
//        UsersGetInfoHelper helper = new UsersGetInfoHelper(renren);
//        helper.asyncGetUsersInfo(pool, param, listener);
//    }
    
	/**
	 * å?‘çŠ¶æ€?ï¼Œå¼‚æ­¥è°ƒç”¨status.set
	 * å?‚è§?http://wiki.dev.renren.com/wiki/Status.set
	 * 
	 * @param status
	 *          è¦?å?‘å¸ƒçš„çŠ¶æ€?
	 * @param listener
	 *          ç”¨ä»¥ç›‘å?¬å?‘å¸ƒçŠ¶æ€?ç»“æžœçš„ç›‘å?¬å™¨å¯¹è±¡
	 * @param truncOption
	 *          è‹¥è¶…å‡ºäº†é•¿åº¦ï¼Œæ˜¯å?¦è‡ªåŠ¨æˆªçŸ­è‡³140ä¸ªå­—
	 */
//    public void publishStatus(StatusSetRequestParam status,
//    		AbstractRequestListener<StatusSetResponseBean> listener, 
//    		boolean truncOption) {
//    	StatusHelper helper = new StatusHelper(renren);
//    	helper.asyncPublish(pool, status, listener, truncOption);
//    }
    
	/**
	 * å?‘é€?æ–°é²œäº‹<br>
	 * å¼‚æ­¥è°ƒç”¨feed.publishFeedæŽ¥å?£
	 * å?‚è§?http://wiki.dev.renren.com/wiki/Feed.publishFeed
	 * 
	 * @param feed
	 *          è¦?å?‘å¸ƒçš„æ–°é²œäº‹
	 * @param listener
	 *          ç”¨ä»¥ç›‘å?¬å?‘å¸ƒæ–°é²œäº‹ç»“æžœçš„ç›‘å?¬å™¨å¯¹è±¡
	 * @param truncOption
	 *          è‹¥è¶…å‡ºäº†é•¿åº¦ï¼Œæ˜¯å?¦è‡ªåŠ¨æˆªçŸ­è‡³é™?åˆ¶çš„é•¿åº¦
	 */
//	public void publishFeed(FeedPublishRequestParam feed,
//			AbstractRequestListener<FeedPublishResponseBean> listener,
//			boolean truncOption) {
//		FeedHelper helper = new FeedHelper(renren);
//		helper.asyncPublish(pool, feed, listener, truncOption);
//	}
	
	
	/**
	 * å?‘é€?æ–°é²œäº‹<br>
	 * å¼‚æ­¥è°ƒç”¨feed.publishFeedæŽ¥å?£
	 * å?‚è§?http://wiki.dev.renren.com/wiki/Feed.publishFeed
	 * 
	 * @param feed
	 *          è¦?å?‘å¸ƒçš„æ–°é²œäº‹
	 * @param listener
	 *          ç”¨ä»¥ç›‘å?¬å?‘å¸ƒæ–°é²œäº‹ç»“æžœçš„ç›‘å?¬å™¨å¯¹è±¡
	 * @param truncOption
	 *          è‹¥è¶…å‡ºäº†é•¿åº¦ï¼Œæ˜¯å?¦è‡ªåŠ¨æˆªçŸ­è‡³é™?åˆ¶çš„é•¿åº¦
	 */
	public void getFeeds(FeedExtractRequestParam feed,
			AbstractRequestListener<FeedExtractRequestResponseBean> listener) {
		FeedHelper helper = new FeedHelper(renren);
		helper.asyncGetFeed(pool, feed, listener);
	}
	
	/**
	 * åˆ›å»ºç›¸å†Œçš„å¼‚æ­¥æŽ¥å?£
	 * 
	 * @param album
	 * 			è°ƒç”¨æ­¤æŽ¥å?£éœ€å‡†å¤‡çš„å?‚æ•°
	 * @param listener
	 *            å¼€å?‘è€…å®žçŽ°ï¼Œå¯¹è¿”å›žç»“æžœè¿›è¡Œæ“?ä½œ
	 *            
	 * 			  <p>è¯¦æƒ…è¯·å?‚è€ƒ http://wiki.dev.renren.com/wiki/Photos.createAlbum
	 */
//	public void createAlbum(AlbumCreateRequestParam album,
//			AbstractRequestListener<AlbumCreateResponseBean> listener) {
//		new PhotoHelper(renren).asyncCreateAlbum(album, listener);
//	}
	
	/**
	 * èŽ·å?–ç›¸å†Œçš„å¼‚æ­¥æŽ¥å?£
	 * 
	 * @param album	
	 * 			è°ƒç”¨æ­¤æŽ¥å?£éœ€å‡†å¤‡çš„å?‚æ•°
	 * @param listener
	 *            å¼€å?‘è€…å®žçŽ°ï¼Œå¯¹è¿”å›žç»“æžœè¿›è¡Œæ“?ä½œ
	 *            
	 *            <p>è¯¦æƒ…è¯·å?‚è€ƒ http://wiki.dev.renren.com/wiki/Photos.getAlbums
	 * 
	 */
//	public void getAlbums(AlbumGetRequestParam album,
//			AbstractRequestListener<AlbumGetResponseBean> listener) {
//		new PhotoHelper(renren).asyncGetAlbums(album, listener);
//	}
	
	/**
	 * ä¸Šä¼ ç…§ç‰‡çš„å¼‚æ­¥æŽ¥å?£
	 * 
	 * @param photo
	 * 			è°ƒç”¨æ­¤æŽ¥å?£éœ€å‡†å¤‡çš„å?‚æ•°
	 * @param listener
	 *            å¼€å?‘è€…å®žçŽ°ï¼Œå¯¹è¿”å›žç»“æžœè¿›è¡Œæ“?ä½œ
	 * 
	 * 			  <p>è¯¦æƒ…è¯·å?‚è€ƒ http://wiki.dev.renren.com/wiki/Photos.upload
	 */
//	public void publishPhoto(PhotoUploadRequestParam photo,
//			AbstractRequestListener<PhotoUploadResponseBean> listener) {
//		new PhotoHelper(renren).asyncUploadPhoto(photo, listener);
//	}

	/**
	 * friends.getæŽ¥å?£ å¾—åˆ°å½“å‰?ç™»å½•ç”¨æˆ·çš„å¥½å?‹åˆ—è¡¨ï¼Œå¾—åˆ°çš„å?ªæ˜¯å?«æœ‰å¥½å?‹idçš„åˆ—è¡¨<br>
	 * http://wiki.dev.renren.com/wiki/Friends.get
	 * 
	 * @see Renren.getFriends
	 * @param param
	 * 			è°ƒç”¨æŽ¥å?£éœ€è¦?çš„å?‚æ•°
	 * @param listener
	 * 			æŽ¥å?£è°ƒç”¨çš„ç›‘å?¬å™¨
	 */
//	public void getFriends (FriendsGetRequestParam param, AbstractRequestListener<FriendsGetResponseBean> listener) {
//		new FriendsHelper(renren).asyncGetFriends(pool, param, listener);
//	}
	
	/**
	 * friends.getFriendsæŽ¥å?£  å¾—åˆ°å½“å‰?ç™»å½•ç”¨æˆ·çš„å¥½å?‹åˆ—è¡¨<br>
	 * http://wiki.dev.renren.com/wiki/Friends.getFriends
	 * 
	 * @see Renren.getFriends
	 * @param param
	 * 			è°ƒç”¨æŽ¥å?£éœ€è¦?çš„å?‚æ•°
	 * @param listener
	 * 			æŽ¥å?£è°ƒç”¨çš„ç›‘å?¬å™¨
	 */
//	public void getFriends (FriendsGetFriendsRequestParam param, AbstractRequestListener<FriendsGetFriendsResponseBean> listener) {
//		new FriendsHelper(renren).asyncGetFriends(pool, param, listener);
//	}
}
