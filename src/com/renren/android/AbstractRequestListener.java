/**
 * $id$
 * Copyright 2011-2012 Renren Inc. All rights reserved.
 */
package com.renren.android;

import java.lang.reflect.Constructor;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;


/**
 * å¯¹å?‘å¸ƒçŠ¶æ€?ã€?æ–°é²œäº‹ã€?ç…§ç‰‡ç­‰è¯·æ±‚è¿›è¡Œå“?åº”çš„listenerçš„æŠ½è±¡ç±»
 * 
 * @author Shaofeng Wang (shaofeng.wang@renren-inc.com)
 *
 */
public abstract class AbstractRequestListener<T extends ResponseBean> {
	
	/**
	 * å°†responseè¯·æ±‚è§£æž?ä¸ºé’ˆå¯¹å…·ä½“è¯·æ±‚çš„bean
	 * 
	 * @param response 
	 * 			è¯·æ±‚å®Œæˆ?å?Žçš„å“?åº”å­—ç¬¦ä¸²
	 * @return 
	 * 			è‹¥è§£æž?æˆ?åŠŸï¼Œè¿”å›žè§£æž?å?Žçš„å¯¹è±¡ï¼Œå?¦åˆ™è¿”å›žnull
	 */
	@SuppressWarnings("unchecked")
    public T parse(String response) {
	    Class<?> c = this.getGenericType();
        try {
            Constructor<T> constructor = (Constructor<T>) c.getDeclaredConstructor(String.class);
            T result = constructor.newInstance(response);
            return result;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
	}
	
	/**
	 * èŽ·å?–Tçš„ç±»åž‹
	 * @param index
	 * @return
	 */
	private Class<?> getGenericType() {
        Type genType = getClass().getGenericSuperclass();
        if (!(genType instanceof ParameterizedType)) {
            return Object.class;
        }
        Type[] params = ((ParameterizedType) genType).getActualTypeArguments();
        if (params.length < 1) {
            throw new RuntimeException("Index outof bounds");
        }
        if (!(params[0] instanceof Class)) {
            return Object.class;
        }
        return (Class<?>) params[0];
    }
	
	 /**
     * è¯·æ±‚å®Œæˆ?å?Žä»¥å¯¹è±¡å½¢å¼?è¿”å›žæœ?åŠ¡å™¨çš„å“?åº”çš„ç»“æžœ
     * 
     * @param bean 
     * 			æœ?åŠ¡å™¨è¿”å›žçš„å“?åº”å­—ç¬¦ä¸²è§£æž?å?Žå¾—åˆ°çš„å¯¹è±¡
     *        
     */
    public abstract void onComplete(T bean);

    /**
     * æœ?åŠ¡å™¨è¿”å›žäº†é”™è¯¯ç»“æžœï¼Œå·²ç»?æ­£ç¡®çš„é“¾æŽ¥ä¸Šäº†æœ?åŠ¡å™¨ä½†æœ‰é”™è¯¯å¦‚ï¼šç¼ºå°‘å?‚æ•°ã€?sessionKeyè¿‡æœŸç­‰ã€‚
     * 
     * @param renrenError
     */
    public abstract void onRenrenError(RenrenError renrenError);

    /**
     * åœ¨è¯·æ±‚æœŸé—´å?‘ç”Ÿäº†ä¸¥é‡?é—®é¢˜ï¼ˆå¦‚ï¼šç½‘ç»œæ•…éšœã€?è®¿é—®çš„åœ°å?€ä¸?å­˜åœ¨ç­‰ï¼‰
     * 
     * @param fault
     */
    public abstract void onFault(Throwable fault);
}
